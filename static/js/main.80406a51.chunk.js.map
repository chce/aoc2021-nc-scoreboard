{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["days","Array","fill","map","_","idx","playerList","Object","entries","scores","members","sortForDay","day","sort","playerA","playerB","completion_day_level","get_star_ts","Number","MAX_SAFE_INTEGER","renderUnixTimestamp","ts","undefined","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","App","useState","selectedDay","setSelectedDay","className","href","onClick","toString","split","dayNumber","dayNumberIdx","player","console","log","name","renderPlayer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gjzBAIIA,EAAO,IAAIC,MAAM,IAAIC,MAAK,GAE9BF,EAAOA,EAAKG,KAAI,SAACC,EAAGC,GAAJ,QAAYA,EAAI,EADT,MAEvB,IAAMC,EAAaC,OAAOC,QAAQC,EAAOC,SA+BzC,SAASC,EAAWC,GAClBN,EAAWO,MAAK,SAACC,EAASC,GAAV,uBAAsB,QAAE,EAAF,UAAED,EAAQ,GAAGE,qBAA6BJ,UAA1C,iBAAC,EAAgD,UAAjD,aAAC,EAAsDK,mBAAvD,QAAsEC,OAAOC,mBAA7E,oBAAmGJ,EAAQ,GAAGC,qBAA6BJ,UAA3I,iBAAkG,EAAgD,UAAlJ,aAAkG,EAAsDK,mBAAxJ,QAAuKC,OAAOC,qBAEtN,SAASC,EAAoBC,GAC3B,QAAWC,IAAPD,EACF,MAAO,GAIT,IAAIE,EAAO,IAAIC,KAAU,IAALH,GAEhBI,EAAQF,EAAKG,WAEbC,EAAU,IAAMJ,EAAKK,aAErBC,EAAU,IAAMN,EAAKO,aAIzB,OADoBL,EAAQ,IAAME,EAAQI,QAAQ,GAAK,IAAMF,EAAQE,QAAQ,GAhD/EpB,EAAW,KA4DIqB,MA3Df,WAEE,MAAsCC,mBAAiB,KAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKA,UAAU,gBAAf,SACE,sBAAMA,UAAU,iBAAhB,SACGpC,EAAKG,KAAI,SAACS,EAAKP,GACd,OAAOO,EAAM,mBAAGyB,KAAK,GAAGC,QAAS,WAC/BH,EAAe,GAAG9B,EAAI,GACtBM,EAAW,GAAGN,EAAI,IAFP,SAGTA,EAAI,IAAS,gCAAQA,EAAI,GAAGkC,WAAWC,MAAM,IAAIrC,KAAI,SAACsC,EAAWC,GAAZ,OAA6B,qCAAGA,EAAe,EAAI,uBAAQ,6BAAOD,mBAOnI,kCACGnC,EAAWH,KAAI,SAACwC,EAAQtC,GACvB,OA8BV,SAAsBsC,EAAaT,EAAqB7B,GAAc,IAAD,YAEnE,OADAuC,QAAQC,IAAIF,GAEV,sBAAKP,UAAU,gBAAf,UACE,uBAAMA,UAAU,qBAAhB,UAAsC/B,EAAI,EAA1C,OADF,IACwDe,EAAmB,UAACuB,EAAO3B,4BAAR,iBAAC,EAA8BkB,UAA/B,iBAAC,EAA6C,UAA9C,aAAC,EAAmDjB,aAD/H,MAC0JG,EAAmB,UAACuB,EAAO3B,4BAAR,iBAAC,EAA8BkB,UAA/B,iBAAC,EAA6C,UAA9C,aAAC,EAAmDjB,aADjO,IACyP,sBAAMmB,UAAU,iBAAhB,SAAkCO,EAAOG,UAlCrRC,CAAaJ,EAAO,GAAIT,EAAa7B,YChBvC2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.80406a51.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport scores from './scores.json';\nimport './App.css';\n\nlet days = new Array(25).fill(false);\nconst numEnabledDays = 1;\ndays = days.map((_, idx) => idx+1 > numEnabledDays ? false : true)\nconst playerList = Object.entries(scores.members);\nsortForDay(\"1\");\nfunction App() {\n \n  const [selectedDay, setSelectedDay] = useState<string>(\"1\");\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"privboard-row\">\n          <span className=\"privboard-days\">\n            {days.map((day, idx) => {\n              return day ? <a href=\"\" onClick={() => {\n                setSelectedDay(\"\"+idx+1);\n                sortForDay(\"\"+idx+1);\n              }}>{idx+1}</a> : <span>{(idx+1).toString().split('').map((dayNumber, dayNumberIdx) => <>{dayNumberIdx > 0 ? <br/> : <></>}{dayNumber}</>)}</span>\n            })}\n            \n\n          </span>\n        </div>\n      </header>\n      <section>\n        {playerList.map((player, idx) => {\n          return renderPlayer(player[1], selectedDay, idx);\n        })}\n        \n      </section>\n    </div>\n  );\n}\n\nfunction sortForDay(day: string) {\n  playerList.sort((playerA, playerB) => ((playerA[1].completion_day_level as any)[day]?.[\"2\"]?.get_star_ts ?? Number.MAX_SAFE_INTEGER) - ((playerB[1].completion_day_level as any)[day]?.[\"2\"]?.get_star_ts ?? Number.MAX_SAFE_INTEGER))  \n}\nfunction renderUnixTimestamp(ts: number): string {\n  if (ts === undefined) {\n    return '';\n  }\n  // Create a new JavaScript Date object based on the timestamp\n  // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n  var date = new Date(ts * 1000);\n  // Hours part from the timestamp\n  var hours = date.getHours();\n  // Minutes part from the timestamp\n  var minutes = \"0\" + date.getMinutes();\n  // Seconds part from the timestamp\n  var seconds = \"0\" + date.getSeconds();\n\n  // Will display time in 10:30:23 format\n  var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n  return formattedTime\n}\n\nfunction renderPlayer(player: any, selectedDay: string, idx: number) {\n  console.log(player);\n  return (\n    <div className=\"privboard-row\">\n      <span className=\"privboard-position\">{idx+1})</span> {renderUnixTimestamp(player.completion_day_level?.[selectedDay]?.[\"1\"]?.get_star_ts as number)} / {renderUnixTimestamp(player.completion_day_level?.[selectedDay]?.[\"2\"]?.get_star_ts as number)} <span className=\"privboard-name\">{player.name}</span></div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}